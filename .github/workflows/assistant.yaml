name: wagie
on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review:
    types: [submitted]
  pull_request:
    types: [opened, synchronize]

jobs:
  claude-response:
    runs-on: ubuntu-latest
    # Only run if it's a comment trigger and the user has write permissions
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '/claude') && 
       (github.event.comment.author_association == 'OWNER' || 
        github.event.comment.author_association == 'MEMBER' || 
        github.event.comment.author_association == 'COLLABORATOR')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '/claude') && 
       (github.event.comment.author_association == 'OWNER' || 
        github.event.comment.author_association == 'MEMBER' || 
        github.event.comment.author_association == 'COLLABORATOR')) ||
      github.event_name == 'issues' ||
      github.event_name == 'pull_request_review' ||
      github.event_name == 'pull_request'
    permissions:
      id-token: write
      contents: write
      issues: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: -1
      - uses: anthropics/claude-code-action@beta
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          trigger_phrase: "/claude"
          timeout_minutes: 30
          allowed_tools: "Bash(cargo check),Bash(cargo clippy),Bash(cargo test),Bash(cargo build),Bash(cargo run),Bash(npm run build),Bash(npm test),Bash(bun test),Bash(tsc),Bash(git log),Bash(git diff),Bash(git show),Bash(find),Bash(grep),Bash(ls),Bash(cat),Bash(head),Bash(tail),Bash(awk),Bash(jq),Bash(sed),Bash(wc),Bash(sort),Bash(uniq),Bash(cut),Bash(xargs)"
          custom_instructions: |
            You are an anarchist security researcher working on critical infrastructure.
            One bug means lost lives. Think and review like Daniel Micay. Zero tolerance for vulns.
            Issue: [what breaks]
            Line: [file:line]
            Attack: [how exploitable]
            Fix: [how to fix]
            Example: |
                ```rust
                fn example() {
                  // Example code
                }
                ```
